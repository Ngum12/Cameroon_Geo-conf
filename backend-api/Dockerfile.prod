# Production Dockerfile for Project Sentinel Backend API
# Cameroon Defense Force OSINT Analysis System - Django Backend
# Optimized for production deployment with security hardening

FROM python:3.11-slim as builder

# Set metadata labels
LABEL maintainer="Project Sentinel Backend Team"
LABEL version="prod"
LABEL description="Production Django backend API for Project Sentinel OSINT system"
LABEL classification="RESTRICTED"

# Build arguments
ARG BUILD_ENV=production
ARG VERSION=prod

# Set environment variables for build
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    git \
    curl \
    wget \
    # GeoDjango dependencies
    gdal-bin \
    libgdal-dev \
    libgeos-dev \
    libproj-dev \
    libspatialite-dev \
    # PostgreSQL client
    libpq-dev \
    postgresql-client \
    # Additional utilities
    netcat-traditional \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set GDAL library path
ENV GDAL_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/libgdal.so

# Create non-root user for security
RUN groupadd -r django && useradd -r -g django -m django

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY backend-api/requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim as production

# Copy system dependencies from builder
COPY --from=builder /usr/lib/x86_64-linux-gnu/ /usr/lib/x86_64-linux-gnu/
COPY --from=builder /usr/bin/gdal* /usr/bin/
COPY --from=builder /usr/bin/ogr* /usr/bin/
COPY --from=builder /usr/bin/pg_* /usr/bin/
COPY --from=builder /usr/bin/psql /usr/bin/
COPY --from=builder /usr/bin/nc /usr/bin/

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    DJANGO_SETTINGS_MODULE=sentinel_core.settings_production \
    GDAL_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/libgdal.so

# Create non-root user
RUN groupadd -r django && useradd -r -g django -m django

# Create necessary directories
RUN mkdir -p /app/staticfiles /app/media /app/logs && \
    chown -R django:django /app

# Set working directory
WORKDIR /app

# Copy application code
COPY backend-api/ .

# Copy additional configuration files
COPY backend-api/sentinel_core/settings_production.py sentinel_core/
COPY backend-api/gunicorn.conf.py .

# Create production settings if not exists
RUN if [ ! -f "sentinel_core/settings_production.py" ]; then \
        cp sentinel_core/settings.py sentinel_core/settings_production.py && \
        echo "DEBUG = False" >> sentinel_core/settings_production.py && \
        echo "ALLOWED_HOSTS = ['*']" >> sentinel_core/settings_production.py; \
    fi

# Fix ownership and permissions
RUN chown -R django:django /app && \
    chmod -R 755 /app && \
    chmod +x manage.py

# Switch to non-root user
USER django

# Collect static files (will be overridden by volume in production)
RUN python manage.py collectstatic --noinput --clear || true

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Create entrypoint script
USER root
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Function to wait for database\n\
wait_for_db() {\n\
    echo "Waiting for database..."\n\
    while ! nc -z ${DB_HOST:-postgres-service} ${DB_PORT:-5432}; do\n\
        sleep 1\n\
    done\n\
    echo "Database is ready!"\n\
}\n\
\n\
# Function to run migrations\n\
run_migrations() {\n\
    echo "Running database migrations..."\n\
    python manage.py migrate --noinput\n\
}\n\
\n\
# Function to create superuser\n\
create_superuser() {\n\
    echo "Creating superuser if not exists..."\n\
    python manage.py shell -c "\
from django.contrib.auth import get_user_model;\
User = get_user_model();\
if not User.objects.filter(username='\''admin'\'').exists():\
    User.objects.create_superuser('\''admin'\'', '\''admin@sentinel.cdf.cm'\'', '\''SentinelAdmin2024!'\'');\
    print('\''Superuser created'\'');\
else:\
    print('\''Superuser already exists'\'')" || true\n\
}\n\
\n\
# Function to collect static files\n\
collect_static() {\n\
    echo "Collecting static files..."\n\
    python manage.py collectstatic --noinput --clear\n\
}\n\
\n\
# Main execution\n\
if [ "$1" = "web" ] || [ "$1" = "gunicorn" ]; then\n\
    wait_for_db\n\
    run_migrations\n\
    create_superuser\n\
    collect_static\n\
    \n\
    echo "Starting Gunicorn server..."\n\
    exec gunicorn sentinel_core.wsgi:application \\\n\
        --bind 0.0.0.0:8000 \\\n\
        --workers 4 \\\n\
        --worker-class sync \\\n\
        --worker-connections 1000 \\\n\
        --timeout 120 \\\n\
        --keepalive 5 \\\n\
        --max-requests 1000 \\\n\
        --max-requests-jitter 100 \\\n\
        --access-logfile - \\\n\
        --error-logfile - \\\n\
        --log-level info\n\
elif [ "$1" = "worker" ]; then\n\
    wait_for_db\n\
    echo "Starting Celery worker..."\n\
    exec celery -A sentinel_core worker --loglevel=info --concurrency=2\n\
elif [ "$1" = "beat" ]; then\n\
    wait_for_db\n\
    echo "Starting Celery beat scheduler..."\n\
    exec celery -A sentinel_core beat --loglevel=info\n\
elif [ "$1" = "flower" ]; then\n\
    echo "Starting Celery Flower monitor..."\n\
    exec celery -A sentinel_core flower --port=5555\n\
else\n\
    exec "$@"\n\
fi\n\
' > /entrypoint.sh && \
chmod +x /entrypoint.sh && \
chown django:django /entrypoint.sh

# Switch back to non-root user
USER django

# Set default command
ENTRYPOINT ["/entrypoint.sh"]
CMD ["web"]

# Alternative commands for different use cases:
# docker run ... web           # Default web server
# docker run ... worker        # Celery worker
# docker run ... beat          # Celery beat scheduler  
# docker run ... flower        # Celery monitoring
# docker run ... manage.py ... # Django management commands

# Volume mounts for persistent data
VOLUME ["/app/staticfiles", "/app/media", "/app/logs"]
