# Prometheus Deployment for Project Sentinel Monitoring
# Comprehensive metrics collection and alerting

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-server
  namespace: monitoring
  labels:
    app: prometheus
    component: server
    project: sentinel
spec:
  replicas: 1
  strategy:
    type: Recreate  # Single instance to avoid data conflicts
  selector:
    matchLabels:
      app: prometheus
      component: server
  template:
    metadata:
      labels:
        app: prometheus
        component: server
        project: sentinel
    spec:
      serviceAccountName: prometheus-sa
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9090
          name: http
          protocol: TCP
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/data
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --web.enable-lifecycle
        - --web.enable-admin-api
        - --storage.tsdb.retention.time=30d
        - --storage.tsdb.retention.size=50GB
        - --web.route-prefix=/
        - --web.external-url=https://prometheus.sentinel.cdf.cm
        - --alertmanager.notification-queue-capacity=10000
        
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
              
        resources:
          limits:
            cpu: "2"
            memory: "4Gi"
          requests:
            cpu: "1"
            memory: "2Gi"
            
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2
          
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus/data
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
          
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534  # nobody user
          runAsGroup: 65534
          fsGroup: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            
      # Init container for proper permissions
      initContainers:
      - name: init-prometheus
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          chown -R 65534:65534 /prometheus/data
          chmod -R 755 /prometheus/data
        volumeMounts:
        - name: prometheus-storage
          mountPath: /prometheus/data
        securityContext:
          runAsUser: 0
          
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage-pvc
          
      nodeSelector:
        workload-type: "monitoring"
        
      tolerations:
      - key: "monitoring"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
  labels:
    app: prometheus
    component: server
    project: sentinel
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: prometheus
    component: server

---
# Prometheus Storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage-pvc
  namespace: monitoring
  labels:
    app: prometheus
    component: storage
    project: sentinel
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app: prometheus
    component: config
    project: sentinel
data:
  prometheus.yml: |
    # Project Sentinel Prometheus Configuration
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
      external_labels:
        cluster: 'sentinel-prod'
        environment: 'production'
        project: 'sentinel'
    
    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
        path_prefix: /alertmanager
        scheme: http
    
    # Load alerting rules
    rule_files:
    - "/etc/prometheus/rules/*.yml"
    - "/etc/prometheus/rules/*.yaml"
    
    # Scrape configuration
    scrape_configs:
    
    # Prometheus itself
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']
      scrape_interval: 30s
      metrics_path: /metrics
    
    # Kubernetes API server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
    
    # Kubernetes nodes
    - job_name: 'kubernetes-nodes'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
    
    # Kubernetes node exporter
    - job_name: 'kubernetes-nodes-exporter'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: 'node-exporter'
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
        regex: Node;(.*)
        target_label: node
        replacement: ${1}
      - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
        regex: Pod;(.*)
        target_label: pod
        replacement: ${1}
    
    # Kubernetes pods
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
    
    # Project Sentinel Backend API
    - job_name: 'sentinel-backend-api'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - sentinel-prod
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        action: keep
        regex: backend-api
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: http
      - source_labels: [__meta_kubernetes_service_name]
        target_label: service
      - source_labels: [__meta_kubernetes_namespace]
        target_label: namespace
      metrics_path: /metrics
      scrape_interval: 30s
    
    # Project Sentinel Frontend
    - job_name: 'sentinel-frontend'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - sentinel-prod
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        action: keep
        regex: frontend-dashboard
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: http
      metrics_path: /metrics
      scrape_interval: 30s
    
    # Project Sentinel NLP Services
    - job_name: 'sentinel-nlp-services'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - sentinel-prod
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        action: keep
        regex: (translation-service|ner-service)
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: http
      metrics_path: /metrics
      scrape_interval: 30s
    
    # PostgreSQL Exporter
    - job_name: 'postgresql-exporter'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - sentinel-prod
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        action: keep
        regex: postgres-exporter
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      scrape_interval: 30s
    
    # Redis Exporter
    - job_name: 'redis-exporter'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - sentinel-prod
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        action: keep
        regex: redis-exporter
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      scrape_interval: 30s
    
    # Nginx Ingress Controller
    - job_name: 'nginx-ingress'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - ingress-nginx
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        action: keep
        regex: ingress-nginx
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: "true"
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: (.+)
        replacement: $1:10254
      scrape_interval: 30s
    
    # Celery Flower Monitoring
    - job_name: 'celery-flower'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - sentinel-prod
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        action: keep
        regex: celery-flower
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: flower
      metrics_path: /metrics
      scrape_interval: 60s

---
# Service Account for Prometheus
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: monitoring
  labels:
    app: prometheus
    project: sentinel

---
# ClusterRole for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
  labels:
    app: prometheus
    project: sentinel
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# ClusterRoleBinding for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-binding
  labels:
    app: prometheus
    project: sentinel
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-role
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: monitoring
