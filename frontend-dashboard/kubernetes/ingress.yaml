# Ingress Configuration for Project Sentinel
# External access to frontend dashboard and backend API

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sentinel-ingress
  namespace: sentinel-prod
  labels:
    app: sentinel-ingress
    project: sentinel
  annotations:
    # Ingress controller specific annotations (adjust based on your ingress controller)
    kubernetes.io/ingress.class: "nginx"
    
    # SSL/TLS Configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Security annotations
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Request size limits
    nginx.ingress.kubernetes.io/proxy-body-size: "16m"
    
    # Timeout configuration
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
    
    # Backend protocol
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    
    # CORS configuration for API
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://sentinel.cdf.cm"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
spec:
  tls:
  - hosts:
    - sentinel.cdf.cm
    - api.sentinel.cdf.cm
    - grafana.sentinel.cdf.cm
    secretName: sentinel-tls-secret
    
  rules:
  # Frontend Dashboard
  - host: sentinel.cdf.cm
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-dashboard-service
            port:
              number: 80
      # Health check endpoint
      - path: /health
        pathType: Exact
        backend:
          service:
            name: frontend-dashboard-service
            port:
              number: 80
      # Metrics endpoint
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: frontend-dashboard-service
            port:
              number: 80
              
  # Backend API
  - host: api.sentinel.cdf.cm
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-api-service
            port:
              number: 8000
      # Health check
      - path: /health/
        pathType: Exact
        backend:
          service:
            name: backend-api-service
            port:
              number: 8000
      # API endpoints
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: backend-api-service
            port:
              number: 8000
      # Admin interface (restricted)
      - path: /admin/
        pathType: Prefix
        backend:
          service:
            name: backend-api-service
            port:
              number: 8000
            
  # Monitoring Dashboard (Grafana)
  - host: grafana.sentinel.cdf.cm
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000

---
# Additional Ingress for NLP Services (internal/admin access)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sentinel-nlp-ingress
  namespace: sentinel-prod
  labels:
    app: sentinel-nlp-ingress
    project: sentinel
  annotations:
    kubernetes.io/ingress.class: "nginx"
    
    # SSL/TLS Configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # Authentication (for internal services)
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: nlp-auth-secret
    nginx.ingress.kubernetes.io/auth-realm: "NLP Services - Authorized Personnel Only"
    
    # Rate limiting (more restrictive for NLP services)
    nginx.ingress.kubernetes.io/rate-limit: "10"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
spec:
  tls:
  - hosts:
    - nlp.sentinel.cdf.cm
    - flower.sentinel.cdf.cm
    secretName: sentinel-nlp-tls-secret
    
  rules:
  # NLP Services Dashboard
  - host: nlp.sentinel.cdf.cm
    http:
      paths:
      # Translation Service
      - path: /translate/
        pathType: Prefix
        backend:
          service:
            name: translation-service
            port:
              number: 8000
      # NER Service
      - path: /ner/
        pathType: Prefix
        backend:
          service:
            name: ner-service
            port:
              number: 8000
      # Health checks
      - path: /health
        pathType: Exact
        backend:
          service:
            name: translation-service
            port:
              number: 8000
              
  # Celery Flower Monitoring
  - host: flower.sentinel.cdf.cm
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: celery-flower-service
            port:
              number: 5555

---
# Network Policy for Ingress Controller
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-network-policy
  namespace: sentinel-prod
  labels:
    app: sentinel-ingress
    project: sentinel
spec:
  podSelector:
    matchLabels:
      app: nginx-ingress-controller
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from anywhere on HTTP/HTTPS ports
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  egress:
  # Allow egress to backend services
  - to:
    - podSelector:
        matchLabels:
          app: frontend-dashboard
    ports:
    - protocol: TCP
      port: 80
  - to:
    - podSelector:
        matchLabels:
          app: backend-api
    ports:
    - protocol: TCP
      port: 8000
  - to:
    - podSelector:
        matchLabels:
          app: translation-service
    ports:
    - protocol: TCP
      port: 8000
  - to:
    - podSelector:
        matchLabels:
          app: ner-service
    ports:
    - protocol: TCP
      port: 8000
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53

---
# Secret for NLP Services Basic Authentication
apiVersion: v1
kind: Secret
metadata:
  name: nlp-auth-secret
  namespace: sentinel-prod
  labels:
    app: sentinel-nlp-ingress
    project: sentinel
type: Opaque
data:
  # admin:SentinelNLP2024! (base64 encoded)
  auth: YWRtaW46JGFwcjEkSDZ1eDlHOVEkc2pSTWVJU3VWVk0wUHFUa2RGUjFlMA==

---
# TLS Certificate for main services (if using cert-manager)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: sentinel-tls-certificate
  namespace: sentinel-prod
  labels:
    project: sentinel
spec:
  secretName: sentinel-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - sentinel.cdf.cm
  - api.sentinel.cdf.cm
  - grafana.sentinel.cdf.cm

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: sentinel-nlp-tls-certificate
  namespace: sentinel-prod
  labels:
    project: sentinel
spec:
  secretName: sentinel-nlp-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - nlp.sentinel.cdf.cm
  - flower.sentinel.cdf.cm
