# Production Dockerfile for Project Sentinel Frontend Dashboard
# Cameroon Defense Force OSINT Analysis System - React Frontend
# Multi-stage build optimized for production deployment with security hardening

# Stage 1: Build stage
FROM node:18-alpine as builder

# Set metadata labels
LABEL maintainer="Project Sentinel Frontend Team"
LABEL version="prod"
LABEL description="Production React frontend dashboard for Project Sentinel OSINT system"
LABEL classification="RESTRICTED"

# Build arguments
ARG BUILD_ENV=production
ARG VERSION=prod
ARG VITE_API_BASE_URL=https://api.sentinel.cdf.cm
ARG VITE_MAPBOX_ACCESS_TOKEN=""
ARG VITE_APP_VERSION=1.0.0

# Set working directory
WORKDIR /app

# Install dependencies first (better caching)
COPY frontend-dashboard/package.json frontend-dashboard/package-lock.json* ./
RUN npm ci --only=production --silent

# Copy source code
COPY frontend-dashboard/ .

# Set environment variables for build
ENV NODE_ENV=production \
    VITE_API_BASE_URL=$VITE_API_BASE_URL \
    VITE_MAPBOX_ACCESS_TOKEN=$VITE_MAPBOX_ACCESS_TOKEN \
    VITE_APP_VERSION=$VITE_APP_VERSION \
    VITE_BUILD_ENV=production

# Build the application with production optimizations
RUN npm run build

# Verify build output
RUN ls -la dist/ && \
    du -sh dist/ && \
    echo "Build completed successfully"

# Stage 2: Production stage
FROM nginx:alpine as production

# Install security updates and required packages
RUN apk upgrade --no-cache && \
    apk add --no-cache \
    curl \
    bash \
    ca-certificates && \
    rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# Remove default nginx content
RUN rm -rf /usr/share/nginx/html/*

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy custom nginx configuration optimized for React SPA
COPY --from=builder /app/nginx.conf /etc/nginx/conf.d/default.conf

# Create additional nginx configuration for production
RUN cat > /etc/nginx/conf.d/security.conf << 'EOF'
# Security headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

# Content Security Policy for Project Sentinel
add_header Content-Security-Policy "
    default-src 'self';
    script-src 'self' 'unsafe-inline' 'unsafe-eval' 
        https://api.mapbox.com 
        https://events.mapbox.com;
    style-src 'self' 'unsafe-inline' 
        https://fonts.googleapis.com 
        https://api.mapbox.com;
    font-src 'self' 
        https://fonts.gstatic.com 
        https://api.mapbox.com;
    img-src 'self' data: https: blob: 
        https://api.mapbox.com 
        https://*.tiles.mapbox.com;
    connect-src 'self' 
        https://api.mapbox.com 
        https://events.mapbox.com 
        wss: 
        https://api.sentinel.cdf.cm 
        https://nlp.sentinel.cdf.cm;
    worker-src 'self' blob:;
    child-src blob:;
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
" always;

# Additional security configurations
server_tokens off;
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
EOF

# Create optimized nginx configuration for production
RUN cat > /etc/nginx/nginx.conf << 'EOF'
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# Load dynamic modules
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        application/json
        application/javascript
        application/xml+rss
        application/xml
        image/svg+xml
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/x-font-ttf
        application/vnd.ms-fontobject
        font/opentype;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    
    # Include server configurations
    include /etc/nginx/conf.d/*.conf;
}
EOF

# Create enhanced default server configuration
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Root directory
    root /usr/share/nginx/html;
    index index.html index.htm;
    
    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    # Security headers (loaded from security.conf)
    include /etc/nginx/conf.d/security.conf;
    
    # Cache static assets aggressively
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        access_log off;
        
        # Precompressed files
        gzip_static on;
    }
    
    # Cache HTML with shorter duration
    location ~* \.html$ {
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
        add_header Vary "Accept-Encoding";
    }
    
    # API proxy with rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass https://api.sentinel.cdf.cm;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 90s;
        proxy_connect_timeout 30s;
        proxy_send_timeout 90s;
        
        # Add security headers for API calls
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Main application route - handle React Router
    location / {
        try_files $uri $uri/ @fallback;
        
        # Add security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
    }
    
    # Fallback for React Router
    location @fallback {
        rewrite ^.*$ /index.html last;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Metrics endpoint for monitoring
    location /metrics {
        access_log off;
        return 200 "# HELP nginx_up Whether nginx is up\n# TYPE nginx_up gauge\nnginx_up 1\n";
        add_header Content-Type text/plain;
    }
    
    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block access to source maps in production
    location ~ \.map$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 50x error page
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
EOF

# Create nginx cache directory and set permissions
RUN mkdir -p /var/cache/nginx && \
    mkdir -p /var/log/nginx && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Create startup script with health checks
RUN cat > /docker-entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Function to validate nginx configuration
validate_config() {
    echo "Validating Nginx configuration..."
    nginx -t
    if [ $? -ne 0 ]; then
        echo "❌ Nginx configuration validation failed"
        exit 1
    fi
    echo "✅ Nginx configuration is valid"
}

# Function to check required files
check_files() {
    echo "Checking required files..."
    if [ ! -f "/usr/share/nginx/html/index.html" ]; then
        echo "❌ index.html not found"
        exit 1
    fi
    echo "✅ Required files are present"
}

# Function to optimize nginx for container
optimize_nginx() {
    echo "Optimizing Nginx for container environment..."
    
    # Calculate worker processes based on CPU cores
    CPU_CORES=$(nproc)
    sed -i "s/worker_processes auto;/worker_processes ${CPU_CORES};/" /etc/nginx/nginx.conf
    
    echo "✅ Nginx optimized for ${CPU_CORES} CPU cores"
}

# Main execution
echo "🚀 Starting Project Sentinel Frontend Dashboard"
echo "📦 Version: ${VITE_APP_VERSION:-unknown}"
echo "🌍 Environment: production"

check_files
validate_config
optimize_nginx

echo "✅ All checks passed. Starting Nginx..."
exec nginx -g 'daemon off;'
EOF

chmod +x /docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Expose port
EXPOSE 80

# Use non-root user for runtime (nginx will handle the port binding)
USER nginx

# Set startup command
ENTRYPOINT ["/docker-entrypoint.sh"]

# Volume mount points for logs (optional)
VOLUME ["/var/log/nginx"]

# Production build metadata
LABEL build.env="production"
LABEL build.version="$VERSION"
LABEL build.timestamp="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
