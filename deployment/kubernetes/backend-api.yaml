# Django Backend API Kubernetes Deployment for Project Sentinel
# Production-ready deployment with database connectivity and health checks

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: sentinel-prod
  labels:
    app: backend-api
    component: api
    project: sentinel
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
        component: api
        project: sentinel
    spec:
      containers:
      - name: backend-api
        image: registry.cdf.cm/sentinel/backend-api:prod
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: DJANGO_SETTINGS_MODULE
          value: "sentinel_core.settings_production"
        - name: DEBUG
          value: "False"
        - name: DB_HOST
          value: "postgres-service"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: django-secret
              key: SECRET_KEY
        - name: ALLOWED_HOSTS
          value: "api.sentinel.cdf.cm,backend-api,localhost"
        - name: TRANSLATION_SERVICE_URL
          value: "http://translation-service:8000"
        - name: NER_SERVICE_URL
          value: "http://ner-service:8000"
        - name: CELERY_BROKER_URL
          value: "redis://redis-service:6379/0"
        - name: CELERY_RESULT_BACKEND
          value: "redis://redis-service:6379/0"
        resources:
          limits:
            cpu: "1"
            memory: "2Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"
        livenessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2
        volumeMounts:
        - name: static-files
          mountPath: /app/staticfiles
        - name: media-files
          mountPath: /app/media
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: static-files
        persistentVolumeClaim:
          claimName: static-files-pvc
      - name: media-files
        persistentVolumeClaim:
          claimName: media-files-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: logs-pvc
      imagePullSecrets:
      - name: registry-secret
      initContainers:
      - name: migrate-database
        image: registry.cdf.cm/sentinel/backend-api:prod
        command: ['python', 'manage.py', 'migrate', '--noinput']
        env:
        - name: DJANGO_SETTINGS_MODULE
          value: "sentinel_core.settings_production"
        - name: DB_HOST
          value: "postgres-service"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD

---
apiVersion: v1
kind: Service
metadata:
  name: backend-api
  namespace: sentinel-prod
  labels:
    app: backend-api
    component: api
    project: sentinel
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  selector:
    app: backend-api

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: static-files-pvc
  namespace: sentinel-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: media-files-pvc
  namespace: sentinel-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-pvc
  namespace: sentinel-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: v1
kind: Secret
metadata:
  name: django-secret
  namespace: sentinel-prod
type: Opaque
data:
  # Base64 encoded Django secret key - MUST BE CHANGED IN PRODUCTION
  SECRET_KEY: <BASE64_ENCODED_SECRET_KEY>

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-api-hpa
  namespace: sentinel-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Celery Worker Deployment for async task processing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: sentinel-prod
  labels:
    app: celery-worker
    component: worker
    project: sentinel
spec:
  replicas: 2
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
        component: worker
        project: sentinel
    spec:
      containers:
      - name: celery-worker
        image: registry.cdf.cm/sentinel/backend-api:prod
        command: ['celery', '-A', 'sentinel_core', 'worker', '--loglevel=info']
        env:
        - name: DJANGO_SETTINGS_MODULE
          value: "sentinel_core.settings_production"
        - name: DB_HOST
          value: "postgres-service"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: CELERY_BROKER_URL
          value: "redis://redis-service:6379/0"
        - name: CELERY_RESULT_BACKEND
          value: "redis://redis-service:6379/0"
        resources:
          limits:
            cpu: "500m"
            memory: "1Gi"
          requests:
            cpu: "250m"
            memory: "512Mi"
      imagePullSecrets:
      - name: registry-secret
